diff --git a/ACGAN.py b/ACGAN.py
index 208cea5..f34ea4a 100644
--- a/ACGAN.py
+++ b/ACGAN.py
@@ -237,15 +237,15 @@ class ACGAN(object):
                       % (epoch, idx, self.num_batches, time.time() - start_time, d_loss, g_loss))
 
                 # save training results for every 300 steps
-                if np.mod(counter, 300) == 0:
-                    samples = self.sess.run(self.fake_images,
-                                            feed_dict={self.z: self.sample_z, self.y: self.test_codes})
-                    tot_num_samples = min(self.sample_num, self.batch_size)
-                    manifold_h = int(np.floor(np.sqrt(tot_num_samples)))
-                    manifold_w = int(np.floor(np.sqrt(tot_num_samples)))
-                    save_images(samples[:manifold_h * manifold_w, :, :, :], [manifold_h, manifold_w], './' + check_folder(
-                        self.result_dir + '/' + self.model_dir) + '/' + self.model_name + '_train_{:02d}_{:04d}.png'.format(
-                        epoch, idx))
+                # if np.mod(counter, 300) == 0:
+                #     samples = self.sess.run(self.fake_images,
+                #                             feed_dict={self.z: self.sample_z, self.y: self.test_codes})
+                #     tot_num_samples = min(self.sample_num, self.batch_size)
+                #     manifold_h = int(np.floor(np.sqrt(tot_num_samples)))
+                #     manifold_w = int(np.floor(np.sqrt(tot_num_samples)))
+                #     save_images(samples[:manifold_h * manifold_w, :, :, :], [manifold_h, manifold_w], './' + check_folder(
+                #         self.result_dir + '/' + self.model_dir) + '/' + self.model_name + '_train_{:02d}_{:04d}.png'.format(
+                #         epoch, idx))
 
             # After an epoch, start_batch_id is set to zero
             # non-zero value is only for the first epoch after loading pre-trained model
diff --git a/BEGAN.py b/BEGAN.py
index e06de8b..e61d2c4 100644
--- a/BEGAN.py
+++ b/BEGAN.py
@@ -202,14 +202,14 @@ class BEGAN(object):
                       % (epoch, idx, self.num_batches, time.time() - start_time, d_loss, g_loss, M_value, k_value))
 
                 # save training results for every 300 steps
-                if np.mod(counter, 300) == 0:
-                    samples = self.sess.run(self.fake_images, feed_dict={self.z: self.sample_z})
-                    tot_num_samples = min(self.sample_num, self.batch_size)
-                    manifold_h = int(np.floor(np.sqrt(tot_num_samples)))
-                    manifold_w = int(np.floor(np.sqrt(tot_num_samples)))
-                    save_images(samples[:manifold_h * manifold_w, :, :, :], [manifold_h, manifold_w],
-                                './' + check_folder(self.result_dir + '/' + self.model_dir) + '/' + self.model_name + '_train_{:02d}_{:04d}.png'.format(
-                                    epoch, idx))
+                # if np.mod(counter, 300) == 0:
+                #     samples = self.sess.run(self.fake_images, feed_dict={self.z: self.sample_z})
+                #     tot_num_samples = min(self.sample_num, self.batch_size)
+                #     manifold_h = int(np.floor(np.sqrt(tot_num_samples)))
+                #     manifold_w = int(np.floor(np.sqrt(tot_num_samples)))
+                #     save_images(samples[:manifold_h * manifold_w, :, :, :], [manifold_h, manifold_w],
+                #                 './' + check_folder(self.result_dir + '/' + self.model_dir) + '/' + self.model_name + '_train_{:02d}_{:04d}.png'.format(
+                #                     epoch, idx))
 
             # After an epoch, start_batch_id is set to zero
             # non-zero value is only for the first epoch after loading pre-trained model
diff --git a/CGAN.py b/CGAN.py
index 646b835..c952703 100644
--- a/CGAN.py
+++ b/CGAN.py
@@ -202,15 +202,15 @@ class CGAN(object):
                       % (epoch, idx, self.num_batches, time.time() - start_time, d_loss, g_loss))
 
                 # save training results for every 300 steps
-                if np.mod(counter, 300) == 0:
-                    samples = self.sess.run(self.fake_images,
-                                            feed_dict={self.z: self.sample_z, self.y: self.test_labels})
-                    tot_num_samples = min(self.sample_num, self.batch_size)
-                    manifold_h = int(np.floor(np.sqrt(tot_num_samples)))
-                    manifold_w = int(np.floor(np.sqrt(tot_num_samples)))
-                    save_images(samples[:manifold_h * manifold_w, :, :, :], [manifold_h, manifold_w],
-                                './' + check_folder(self.result_dir + '/' + self.model_dir) + '/' + self.model_name + '_train_{:02d}_{:04d}.png'.format(
-                                    epoch, idx))
+                # if np.mod(counter, 300) == 0:
+                #     samples = self.sess.run(self.fake_images,
+                #                             feed_dict={self.z: self.sample_z, self.y: self.test_labels})
+                #     tot_num_samples = min(self.sample_num, self.batch_size)
+                #     manifold_h = int(np.floor(np.sqrt(tot_num_samples)))
+                #     manifold_w = int(np.floor(np.sqrt(tot_num_samples)))
+                #     save_images(samples[:manifold_h * manifold_w, :, :, :], [manifold_h, manifold_w],
+                #                 './' + check_folder(self.result_dir + '/' + self.model_dir) + '/' + self.model_name + '_train_{:02d}_{:04d}.png'.format(
+                #                     epoch, idx))
 
             # After an epoch, start_batch_id is set to zero
             # non-zero value is only for the first epoch after loading pre-trained model
diff --git a/CVAE.py b/CVAE.py
index e76e71d..a2a6a11 100644
--- a/CVAE.py
+++ b/CVAE.py
@@ -197,15 +197,15 @@ class CVAE(object):
                       % (epoch, idx, self.num_batches, time.time() - start_time, loss, nll_loss, kl_loss))
 
                 # save training results for every 300 steps
-                if np.mod(counter, 300) == 0:
-                    samples = self.sess.run(self.fake_images,
-                                            feed_dict={self.z: self.sample_z, self.y: self.test_labels})
-                    tot_num_samples = min(self.sample_num, self.batch_size)
-                    manifold_h = int(np.floor(np.sqrt(tot_num_samples)))
-                    manifold_w = int(np.floor(np.sqrt(tot_num_samples)))
-                    save_images(samples[:manifold_h * manifold_w, :, :, :], [manifold_h, manifold_w],
-                                './' + check_folder(self.result_dir + '/' + self.model_dir) + '/' + self.model_name + '_train_{:02d}_{:04d}.png'.format(
-                                    epoch, idx))
+                # if np.mod(counter, 300) == 0:
+                #     samples = self.sess.run(self.fake_images,
+                #                             feed_dict={self.z: self.sample_z, self.y: self.test_labels})
+                #     tot_num_samples = min(self.sample_num, self.batch_size)
+                #     manifold_h = int(np.floor(np.sqrt(tot_num_samples)))
+                #     manifold_w = int(np.floor(np.sqrt(tot_num_samples)))
+                #     save_images(samples[:manifold_h * manifold_w, :, :, :], [manifold_h, manifold_w],
+                #                 './' + check_folder(self.result_dir + '/' + self.model_dir) + '/' + self.model_name + '_train_{:02d}_{:04d}.png'.format(
+                #                     epoch, idx))
 
             # After an epoch, start_batch_id is set to zero
             # non-zero value is only for the first epoch after loading pre-trained model
diff --git a/DRAGAN.py b/DRAGAN.py
index 8aa8560..ff97c78 100644
--- a/DRAGAN.py
+++ b/DRAGAN.py
@@ -204,15 +204,15 @@ class DRAGAN(object):
                       % (epoch, idx, self.num_batches, time.time() - start_time, d_loss, g_loss))
 
                 # save training results for every 300 steps
-                if np.mod(counter, 300) == 0:
-                    samples = self.sess.run(self.fake_images,
-                                            feed_dict={self.z: self.sample_z})
-                    tot_num_samples = min(self.sample_num, self.batch_size)
-                    manifold_h = int(np.floor(np.sqrt(tot_num_samples)))
-                    manifold_w = int(np.floor(np.sqrt(tot_num_samples)))
-                    save_images(samples[:manifold_h * manifold_w, :, :, :], [manifold_h, manifold_w],
-                                './' + check_folder(self.result_dir + '/' + self.model_dir) + '/' + self.model_name + '_train_{:02d}_{:04d}.png'.format(
-                                    epoch, idx))
+                # if np.mod(counter, 300) == 0:
+                #     samples = self.sess.run(self.fake_images,
+                #                             feed_dict={self.z: self.sample_z})
+                #     tot_num_samples = min(self.sample_num, self.batch_size)
+                #     manifold_h = int(np.floor(np.sqrt(tot_num_samples)))
+                #     manifold_w = int(np.floor(np.sqrt(tot_num_samples)))
+                #     save_images(samples[:manifold_h * manifold_w, :, :, :], [manifold_h, manifold_w],
+                #                 './' + check_folder(self.result_dir + '/' + self.model_dir) + '/' + self.model_name + '_train_{:02d}_{:04d}.png'.format(
+                #                     epoch, idx))
 
             # After an epoch, start_batch_id is set to zero
             # non-zero value is only for the first epoch after loading pre-trained model
diff --git a/EBGAN.py b/EBGAN.py
index 279314d..c937b67 100644
--- a/EBGAN.py
+++ b/EBGAN.py
@@ -201,15 +201,15 @@ class EBGAN(object):
                       % (epoch, idx, self.num_batches, time.time() - start_time, d_loss, g_loss))
 
                 # save training results for every 300 steps
-                if np.mod(counter, 300) == 0:
-                    samples = self.sess.run(self.fake_images,
-                                            feed_dict={self.z: self.sample_z})
-                    tot_num_samples = min(self.sample_num, self.batch_size)
-                    manifold_h = int(np.floor(np.sqrt(tot_num_samples)))
-                    manifold_w = int(np.floor(np.sqrt(tot_num_samples)))
-                    save_images(samples[:manifold_h * manifold_w, :, :, :], [manifold_h, manifold_w],
-                                './' + check_folder(self.result_dir + '/' + self.model_dir) + '/' + self.model_name + '_train_{:02d}_{:04d}.png'.format(
-                                    epoch, idx))
+                # if np.mod(counter, 300) == 0:
+                #     samples = self.sess.run(self.fake_images,
+                #                             feed_dict={self.z: self.sample_z})
+                #     tot_num_samples = min(self.sample_num, self.batch_size)
+                #     manifold_h = int(np.floor(np.sqrt(tot_num_samples)))
+                #     manifold_w = int(np.floor(np.sqrt(tot_num_samples)))
+                #     save_images(samples[:manifold_h * manifold_w, :, :, :], [manifold_h, manifold_w],
+                #                 './' + check_folder(self.result_dir + '/' + self.model_dir) + '/' + self.model_name + '_train_{:02d}_{:04d}.png'.format(
+                #                     epoch, idx))
 
             # After an epoch, start_batch_id is set to zero
             # non-zero value is only for the first epoch after loading pre-trained model
diff --git a/GAN.py b/GAN.py
index 6d45c55..77dd31a 100644
--- a/GAN.py
+++ b/GAN.py
@@ -4,6 +4,7 @@ import os
 import time
 import tensorflow as tf
 import numpy as np
+import gzip
 
 from ops import *
 from utils import *
@@ -185,14 +186,14 @@ class GAN(object):
                       % (epoch, idx, self.num_batches, time.time() - start_time, d_loss, g_loss))
 
                 # save training results for every 300 steps
-                if np.mod(counter, 300) == 0:
-                    samples = self.sess.run(self.fake_images, feed_dict={self.z: self.sample_z})
-                    tot_num_samples = min(self.sample_num, self.batch_size)
-                    manifold_h = int(np.floor(np.sqrt(tot_num_samples)))
-                    manifold_w = int(np.floor(np.sqrt(tot_num_samples)))
-                    save_images(samples[:manifold_h * manifold_w, :, :, :], [manifold_h, manifold_w],
-                                './' + check_folder(self.result_dir + '/' + self.model_dir) + '/' + self.model_name + '_train_{:02d}_{:04d}.png'.format(
-                                    epoch, idx))
+                # if np.mod(counter, 300) == 0:
+                #     samples = self.sess.run(self.fake_images, feed_dict={self.z: self.sample_z})
+                #     tot_num_samples = min(self.sample_num, self.batch_size)
+                #     manifold_h = int(np.floor(np.sqrt(tot_num_samples)))
+                #     manifold_w = int(np.floor(np.sqrt(tot_num_samples)))
+                #     save_images(samples[:manifold_h * manifold_w, :, :, :], [manifold_h, manifold_w],
+                #                 './' + check_folder(self.result_dir + '/' + self.model_dir) + '/' + self.model_name + '_train_{:02d}_{:04d}.png'.format(
+                #                     epoch, idx))
 
             # After an epoch, start_batch_id is set to zero
             # non-zero value is only for the first epoch after loading pre-trained model
diff --git a/LSGAN.py b/LSGAN.py
index 18beb85..994431a 100644
--- a/LSGAN.py
+++ b/LSGAN.py
@@ -189,15 +189,15 @@ class LSGAN(object):
                       % (epoch, idx, self.num_batches, time.time() - start_time, d_loss, g_loss))
 
                 # save training results for every 300 steps
-                if np.mod(counter, 300) == 0:
-                    samples = self.sess.run(self.fake_images,
-                                            feed_dict={self.z: self.sample_z})
-                    tot_num_samples = min(self.sample_num, self.batch_size)
-                    manifold_h = int(np.floor(np.sqrt(tot_num_samples)))
-                    manifold_w = int(np.floor(np.sqrt(tot_num_samples)))
-                    save_images(samples[:manifold_h * manifold_w, :, :, :], [manifold_h, manifold_w],
-                                './' + check_folder(self.result_dir + '/' + self.model_dir) + '/' + self.model_name + '_train_{:02d}_{:04d}.png'.format(
-                                    epoch, idx))
+                # if np.mod(counter, 300) == 0:
+                #     samples = self.sess.run(self.fake_images,
+                #                             feed_dict={self.z: self.sample_z})
+                #     tot_num_samples = min(self.sample_num, self.batch_size)
+                #     manifold_h = int(np.floor(np.sqrt(tot_num_samples)))
+                #     manifold_w = int(np.floor(np.sqrt(tot_num_samples)))
+                #     save_images(samples[:manifold_h * manifold_w, :, :, :], [manifold_h, manifold_w],
+                #                 './' + check_folder(self.result_dir + '/' + self.model_dir) + '/' + self.model_name + '_train_{:02d}_{:04d}.png'.format(
+                #                     epoch, idx))
 
             # After an epoch, start_batch_id is set to zero
             # non-zero value is only for the first epoch after loading pre-trained model
diff --git a/WGAN.py b/WGAN.py
index 148527c..4baaa70 100644
--- a/WGAN.py
+++ b/WGAN.py
@@ -189,15 +189,15 @@ class WGAN(object):
                       % (epoch, idx, self.num_batches, time.time() - start_time, d_loss, g_loss))
 
                 # save training results for every 300 steps
-                if np.mod(counter, 300) == 0:
-                    samples = self.sess.run(self.fake_images,
-                                            feed_dict={self.z: self.sample_z})
-                    tot_num_samples = min(self.sample_num, self.batch_size)
-                    manifold_h = int(np.floor(np.sqrt(tot_num_samples)))
-                    manifold_w = int(np.floor(np.sqrt(tot_num_samples)))
-                    save_images(samples[:manifold_h * manifold_w, :, :, :], [manifold_h, manifold_w],
-                                './' + check_folder(self.result_dir + '/' + self.model_dir) + '/' + self.model_name + '_train_{:02d}_{:04d}.png'.format(
-                                    epoch, idx))
+                # if np.mod(counter, 300) == 0:
+                #     samples = self.sess.run(self.fake_images,
+                #                             feed_dict={self.z: self.sample_z})
+                #     tot_num_samples = min(self.sample_num, self.batch_size)
+                #     manifold_h = int(np.floor(np.sqrt(tot_num_samples)))
+                #     manifold_w = int(np.floor(np.sqrt(tot_num_samples)))
+                #     save_images(samples[:manifold_h * manifold_w, :, :, :], [manifold_h, manifold_w],
+                #                 './' + check_folder(self.result_dir + '/' + self.model_dir) + '/' + self.model_name + '_train_{:02d}_{:04d}.png'.format(
+                #                     epoch, idx))
 
             # After an epoch, start_batch_id is set to zero
             # non-zero value is only for the first epoch after loading pre-trained model
diff --git a/WGAN_GP.py b/WGAN_GP.py
index 347004c..b0bcdc0 100644
--- a/WGAN_GP.py
+++ b/WGAN_GP.py
@@ -200,15 +200,15 @@ class WGAN_GP(object):
                       % (epoch, idx, self.num_batches, time.time() - start_time, d_loss, g_loss))
 
                 # save training results for every 300 steps
-                if np.mod(counter, 300) == 0:
-                    samples = self.sess.run(self.fake_images,
-                                            feed_dict={self.z: self.sample_z})
-                    tot_num_samples = min(self.sample_num, self.batch_size)
-                    manifold_h = int(np.floor(np.sqrt(tot_num_samples)))
-                    manifold_w = int(np.floor(np.sqrt(tot_num_samples)))
-                    save_images(samples[:manifold_h * manifold_w, :, :, :], [manifold_h, manifold_w],
-                                './' + check_folder(self.result_dir + '/' + self.model_dir) + '/' + self.model_name + '_train_{:02d}_{:04d}.png'.format(
-                                    epoch, idx))
+                # if np.mod(counter, 300) == 0:
+                #     samples = self.sess.run(self.fake_images,
+                #                             feed_dict={self.z: self.sample_z})
+                #     tot_num_samples = min(self.sample_num, self.batch_size)
+                #     manifold_h = int(np.floor(np.sqrt(tot_num_samples)))
+                #     manifold_w = int(np.floor(np.sqrt(tot_num_samples)))
+                #     save_images(samples[:manifold_h * manifold_w, :, :, :], [manifold_h, manifold_w],
+                #                 './' + check_folder(self.result_dir + '/' + self.model_dir) + '/' + self.model_name + '_train_{:02d}_{:04d}.png'.format(
+                #                     epoch, idx))
 
             # After an epoch, start_batch_id is set to zero
             # non-zero value is only for the first epoch after loading pre-trained model
diff --git a/infoGAN.py b/infoGAN.py
index 84ff3bd..c938065 100644
--- a/infoGAN.py
+++ b/infoGAN.py
@@ -255,15 +255,15 @@ class infoGAN(object):
                       % (epoch, idx, self.num_batches, time.time() - start_time, d_loss, g_loss))
 
                 # save training results for every 300 steps
-                if np.mod(counter, 300) == 0:
-                    samples = self.sess.run(self.fake_images,
-                                            feed_dict={self.z: self.sample_z, self.y: self.test_codes})
-                    tot_num_samples = min(self.sample_num, self.batch_size)
-                    manifold_h = int(np.floor(np.sqrt(tot_num_samples)))
-                    manifold_w = int(np.floor(np.sqrt(tot_num_samples)))
-                    save_images(samples[:manifold_h * manifold_w, :, :, :], [manifold_h, manifold_w],
-                                './' + check_folder(self.result_dir + '/' + self.model_dir) + '/' + self.model_name + '_train_{:02d}_{:04d}.png'.format(
-                                    epoch, idx))
+                # if np.mod(counter, 300) == 0:
+                #     samples = self.sess.run(self.fake_images,
+                #                             feed_dict={self.z: self.sample_z, self.y: self.test_codes})
+                #     tot_num_samples = min(self.sample_num, self.batch_size)
+                #     manifold_h = int(np.floor(np.sqrt(tot_num_samples)))
+                #     manifold_w = int(np.floor(np.sqrt(tot_num_samples)))
+                #     save_images(samples[:manifold_h * manifold_w, :, :, :], [manifold_h, manifold_w],
+                #                 './' + check_folder(self.result_dir + '/' + self.model_dir) + '/' + self.model_name + '_train_{:02d}_{:04d}.png'.format(
+                #                     epoch, idx))
 
             # After an epoch, start_batch_id is set to zero
             # non-zero value is only for the first epoch after loading pre-trained model
diff --git a/main.py b/main.py
index 3decd10..ddb8a60 100644
--- a/main.py
+++ b/main.py
@@ -33,7 +33,7 @@ def parse_args():
     parser.add_argument('--dataset', type=str, default='mnist', choices=['mnist', 'fashion-mnist', 'celebA'],
                         help='The name of dataset')
     parser.add_argument('--epoch', type=int, default=20, help='The number of epochs to run')
-    parser.add_argument('--batch_size', type=int, default=64, help='The size of batch')
+    parser.add_argument('--batch_size', type=int, default=1, help='The size of batch')
     parser.add_argument('--z_dim', type=int, default=62, help='Dimension of noise vector')
     parser.add_argument('--checkpoint_dir', type=str, default='checkpoint',
                         help='Directory name to save the checkpoints')
diff --git a/utils.py b/utils.py
index 8d8e5ba..aaad78a 100644
--- a/utils.py
+++ b/utils.py
@@ -11,6 +11,7 @@ from time import gmtime, strftime
 from six.moves import xrange
 import matplotlib.pyplot as plt
 import os, gzip
+import imageio
 
 import tensorflow as tf
 import tensorflow.contrib.slim as slim
@@ -102,7 +103,8 @@ def merge(images, size):
 
 def imsave(images, size, path):
     image = np.squeeze(merge(images, size))
-    return scipy.misc.imsave(path, image)
+    # return scipy.misc.imsave(path, image)
+    return imageio.imwrite(path, image)
 
 def center_crop(x, crop_h, crop_w, resize_h=64, resize_w=64):
     if crop_w is None:
