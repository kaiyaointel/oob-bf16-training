diff --git a/models/model_factory.py b/models/model_factory.py
index 1889f4d..b6e44b0 100644
--- a/models/model_factory.py
+++ b/models/model_factory.py
@@ -94,7 +94,7 @@ def get_model(model_name='ResNest50',input_shape=(224,224,3),n_classes=81,
         stage_depth=regnet_parameters[model_name['stage_depth']],stage_width=regnet_parameters[model_name['stage_width']],\
             stage_G=regnet_parameters[model_name['stage_G']],SEstyle_atten=regnet_parameters[model_name['SEstyle_atten']],**kwargs).build()
     
-    if model_name in resnest3d_parameters.keys():
+    elif model_name in resnest3d_parameters.keys():
         model = ResNest3D(verbose=verbose, input_shape=input_shape,
         n_classes=n_classes, dropout_rate=dropout_rate, fc_activation=fc_activation,
         blocks_set=resnest3d_parameters[model_name]['blocks_set'], radix=2, groups=1, bottleneck_width=64, deep_stem=True,
@@ -139,4 +139,4 @@ if __name__ == "__main__":
     # model = get_model(model_name="RegNet",input_shape=input_shape,n_classes=n_classes,
     #             verbose=True,fc_activation=fc_activation,stage_depth=[1,3,7,4],
     #             stage_width=[48,112,256,608],stage_G=16,SEstyle_atten="SE",active='mish')
-    # print('-'*10)
\ No newline at end of file
+    # print('-'*10)
diff --git a/simpel_test.py b/simpel_test.py
index 1a0d203..d6f89e8 100644
--- a/simpel_test.py
+++ b/simpel_test.py
@@ -1,43 +1,83 @@
+import argparse
+import numpy as np
+import time
+import tensorflow as tf
 from models.model_factory import get_model
 
+
 if __name__ == "__main__":
+    parser = argparse.ArgumentParser()
+    # group = parser.add_mutually_exclusive_group(required=True)
+    parser.add_argument("--model_name", type=str,
+                        help="name of model, can be [resnest50, resnest50_3d, resnest101]")
+    parser.add_argument("--model_path", type=str,
+                        help="save path if train, load path if eval")
+    parser.add_argument("--train", action='store_true',
+                        help="weather training, default is false")
+    parser.add_argument("--num_warmup", type=int, default=10,
+                        help="numbers of warmup iteration, default is 10")
+    parser.add_argument("--num_iter", type=int, default=500,
+                        help="numbers of eval iteration, default is 500")
+    parser.add_argument("--batch_size", type=int, default=1,
+                        help="eval batch size, default is 1")
+    args = parser.parse_args()
 
     # model_names = ['ResNest50','ResNest101','ResNest200','ResNest269']
-    # model_names = ['ResNest50']
+    # model_names = ['resnest50']
     # model_names = ['resnest50_3d','resnest101_3d']
-    model_names = ['GENet_light','GENet_normal','GENet_large']
+    # model_names = ['GENet_light','GENet_normal','GENet_large']
     
     # model_names = ['RegNetX400','RegNetX1.6','RegNetY400','RegNetY1.6']
     # input_shape = [224,224,3]
-    input_shape = [10,256,256,3]
+
+    model_names = ['resnest50', 'resnest50_3d', 'resnest101']
+    assert args.model_name in model_names, 'model name not valid!'
+
+    args.num_iter = 10 if args.train else args.num_iter
+    input_img = tf.random.normal([args.num_iter, 256, 256, 3])
+    label=tf.constant([2,1,3,4,5,6,4,3,5,6] * (args.num_iter//10))
+
     n_classes=81
+    input_shape = [256,256,3] 
     fc_activation='softmax' #softmax sigmoid
 
-    # resnest
-    for model_name in model_names:
-        print('model_name',model_name)
-        model = get_model(model_name=model_name,input_shape=input_shape,n_classes=n_classes,
-                    verbose=True,fc_activation=fc_activation,using_cb=False)
+    # warmup for eval
+    warmup_input = tf.random.normal([10, 256, 256, 3])
+    warmup_label = tf.constant([2,1,3,4,5,6,4,3,5,6])
+
+    if '3d' in args.model_name:
+        input_shape = [224,224,64,3]
+        args.num_iter = 100
+        input_img = tf.random.normal([args.num_iter, 224, 224, 64, 3])
+        label=tf.constant([2,1,3,4,5,6,4,3,5,6] * (args.num_iter//10))
+
+        warmup_input = tf.random.normal([1, 224, 224, 64, 3])
+        warmup_label = tf.constant([2,])
+
+    if args.train:
+        print("Training *****")
+        print('model_name', args.model_name)
         print('-'*10)
+        model = get_model(model_name=args.model_name,input_shape=input_shape,
+                          n_classes=n_classes,verbose=True, fc_activation=fc_activation,
+                          using_cb=False)
 
-    #RegNetY600 set
-    # model = get_model(model_name="RegNet",input_shape=input_shape,n_classes=n_classes,
-    #             verbose=True,fc_activation=fc_activation,stage_depth=[1,3,7,4],
-    #             stage_width=[48,112,256,608],stage_G=16,SEstyle_atten="SE",active='mish')
-    # print('-'*10)
-
-    #DETR
-    # model_name = 'res34_DETR'
-    # print('model_name',model_name)
-    # model = get_model(model_name=model_name,input_shape=input_shape,
-    #                   n_classes=n_classes,verbose=True,training=None,
-    #                   fc_activation=fc_activation)
-    # print('-'*10)
-
-    # model_names = ['ResNest50_DETR','res34_DETR']
-    # for model_name in model_names:
-    #     print('model_name',model_name)
-    #     model = get_model(model_name=model_name,input_shape=input_shape,
-    #                   n_classes=n_classes,verbose=True,
-    #                   fc_activation=fc_activation,using_cb=True)
-    
+        model.compile(optimizer='adam', loss=tf.keras.losses.BinaryCrossentropy())
+        # model.summary()
+        model.fit(input_img, label, batch_size=args.batch_size, epochs=1)
+        model.save(args.model_path)
+
+    else:
+        print('model_name', args.model_name)
+        print('-'*10)
+        model = tf.keras.models.load_model(args.model_path)
+        # model.summary()
+
+        # warmup
+        model.evaluate(warmup_input, warmup_label)
+        tic = time.time()
+        model.evaluate(input_img, label, batch_size=args.batch_size)
+        total_time = time.time() - tic
+        print(" Total time: {}\n Total sample: {}\n Throughput: {:.2f} samples/s".format(
+            total_time, args.num_iter, args.num_iter / total_time
+        ))
