diff --git a/setup.py b/setup.py
index f92dac8a..c85d7434 100644
--- a/setup.py
+++ b/setup.py
@@ -93,8 +93,8 @@ setup(
     install_requires=[
         "scipy>=0.19.0",
         "torch>=0.4.1",
-        "numpy==1.15.4",
-        "librosa==0.6.2",
+        "numpy>=1.19.2",
+        "librosa==0.8.0",
         "unidecode==0.4.20",
         "attrdict",
         "tensorboardX",
diff --git a/utils/synthesis.py b/utils/synthesis.py
index 1047c16b..0af226c9 100644
--- a/utils/synthesis.py
+++ b/utils/synthesis.py
@@ -3,7 +3,7 @@ import numpy as np
 from .text import text_to_sequence, phoneme_to_sequence
 
 
-def text_to_seqvec(text, CONFIG, use_cuda):
+def text_to_seqvec(text, CONFIG, use_cuda, device='cpu'):
     text_cleaner = [CONFIG.text_cleaner]
     # text ot phonemes to sequence vector
     if CONFIG.use_phonemes:
@@ -18,6 +18,8 @@ def text_to_seqvec(text, CONFIG, use_cuda):
     chars_var = torch.from_numpy(seq).unsqueeze(0)
     if use_cuda:
         chars_var = chars_var.cuda()
+    else:
+        chars_var = chars_var.to(device)
     return chars_var.long()
 
 
@@ -98,7 +100,8 @@ def synthesis(model,
               truncated=False,
               enable_eos_bos_chars=False, #pylint: disable=unused-argument
               use_griffin_lim=False,
-              do_trim_silence=False):
+              do_trim_silence=False,
+              device='cpu'):
     """Synthesize voice for the given text.
 
         Args:
@@ -120,7 +123,7 @@ def synthesis(model,
     if CONFIG.model == "TacotronGST" and style_wav is not None:
         style_mel = compute_style_mel(style_wav, ap, use_cuda)
     # preprocess the given text
-    inputs = text_to_seqvec(text, CONFIG, use_cuda)
+    inputs = text_to_seqvec(text, CONFIG, use_cuda, device=device)
     speaker_id = id_to_torch(speaker_id)
     if speaker_id is not None and use_cuda:
         speaker_id = speaker_id.cuda()
@@ -137,4 +140,4 @@ def synthesis(model,
         # trim silence
         if do_trim_silence:
             wav = trim_silence(wav, ap)
-    return wav, alignment, decoder_output, postnet_output, stop_tokens
+    return wav, alignment, decoder_output, postnet_output, stop_tokens, inputs.size()
