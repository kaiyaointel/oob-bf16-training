diff --git a/classy_vision/generic/util.py b/classy_vision/generic/util.py
index 9cd2e6b..f5ecbb2 100644
--- a/classy_vision/generic/util.py
+++ b/classy_vision/generic/util.py
@@ -19,7 +19,13 @@ import numpy as np
 import torch
 import torch.nn as nn
 from fvcore.common.file_io import PathManager
-from torch._six import container_abcs
+# from torch._six import container_abcs
+TORCH_MAJOR = int(torch.__version__.split('.')[0])
+TORCH_MINOR = int(torch.__version__.split('.')[1])
+if TORCH_MAJOR == 1 and TORCH_MINOR < 8:
+    from torch._six import container_abcs
+else:
+    import collections.abc as container_abcs
 
 
 # constants:
diff --git a/test/models_resnext3d_test.py b/test/models_resnext3d_test.py
index f575ab1..1c435bd 100644
--- a/test/models_resnext3d_test.py
+++ b/test/models_resnext3d_test.py
@@ -4,10 +4,14 @@
 # This source code is licensed under the MIT license found in the
 # LICENSE file in the root directory of this source tree.
 
+import argparse
 import copy
 import unittest
-from test.generic.utils import compare_model_state
-
+# import intel_pytorch_extension as ipex
+# from intel_pytorch_extension import core
+from generic.utils import compare_model_state
+import time
+import os
 import torch
 from classy_vision.models import ClassyModel, build_model
 
@@ -40,15 +44,15 @@ class TestResNeXt3D(unittest.TestCase):
         }
         pbt = "postactivated_bottleneck_transformation"
         model_config_variants = [
-            # ResNeXt3D-34
-            {
-                "residual_transformation_type": "basic_transformation",
-                "num_blocks": [3, 4, 6, 3],
-            },
+            # # ResNeXt3D-34
+            # {
+            #     "residual_transformation_type": "basic_transformation",
+            #     "num_blocks": [3, 4, 6, 3],
+            # },
             # ResNeXt3D-50
             {"residual_transformation_type": pbt, "num_blocks": [3, 4, 6, 3]},
-            # ResNeXt3D-101
-            {"residual_transformation_type": pbt, "num_blocks": [3, 4, 23, 3]},
+            # # ResNeXt3D-101
+            # {"residual_transformation_type": pbt, "num_blocks": [3, 4, 23, 3]},
         ]
 
         self.model_configs = []
@@ -67,15 +71,15 @@ class TestResNeXt3D(unittest.TestCase):
         self.batchsize = 1
 
         self.forward_pass_configs = {
-            "train": {
-                # input shape: N x C x T x H x W
-                "input": {"video": torch.rand(self.batchsize, 3, 16, 112, 112)},
-                "model": {
-                    "stem_maxpool": False,
-                    "stage_temporal_stride": [1, 2, 2, 2],
-                    "stage_spatial_stride": [1, 2, 2, 2],
-                },
-            },
+            # "train": {
+            #     # input shape: N x C x T x H x W
+            #     "input": {"video": torch.rand(self.batchsize, 3, 16, 112, 112)},
+            #     "model": {
+            #         "stem_maxpool": False,
+            #         "stage_temporal_stride": [1, 2, 2, 2],
+            #         "stage_spatial_stride": [1, 2, 2, 2],
+            #     },
+            # },
             "test": {
                 "input": {"video": torch.rand(self.batchsize, 3, 16, 256, 320)},
                 "model": {
@@ -104,11 +108,63 @@ class TestResNeXt3D(unittest.TestCase):
                 num_classes = forward_pass_model_config["heads"][0]["num_classes"]
 
                 model = build_model(forward_pass_model_config)
-                model.train(split == "train")
+                model = model.eval()
+                if args.channels_last:
+                    model_oob, input_oob = model, split_config["input"]
+                    model_oob = model_oob.to(memory_format=torch.channels_last)
+                    if args.jit:
+                        model_oob = torch.jit.trace(model_oob.eval(),input_oob)
+                    model, split_config["input"] = model_oob, input_oob
+                    print("---- Use channels last format.")
 
-                out = model(split_config["input"])
+                warmup_steps = args.warmup_iters
+                iters = args.num_iters
+                # warmup
+                for i in range(warmup_steps):
+                    out = model(split_config["input"])
+                ##run inference
+                total_time = 0.0
+                reps_done = 0
+                for i in range(iters):
+                    start = time.time()
 
-                self.assertEqual(out.size(), (self.batchsize, num_classes))
+                    if args.profile:
+                        with torch.profiler.profile(activities=[torch.profiler.ProfilerActivity.CPU]) as prof:
+                            if args.precision == 'bfloat16':
+                                with torch.cpu.amp.autocast(enabled=True, dtype=torch.bfloat16):
+                                    out = model(split_config["input"])
+                            else:
+                                out = model(split_config["input"])
+                    else:
+                        if args.precision == 'bfloat16':
+                            with torch.cpu.amp.autocast(enabled=True, dtype=torch.bfloat16):
+                                out = model(split_config["input"])
+                        else:
+                            out = model(split_config["input"])
+
+                    end = time.time()
+                    delta = end - start
+                    total_time += delta
+                    reps_done += 1
+                avg_time = total_time / reps_done
+                latency = avg_time * 1000
+                throughput = 1.0 / avg_time
+                print('Latency: %.3f ms' % (latency))
+                print('Throughput: %.3f images/sec' % throughput)
+                # self.assertEqual(out.size(), (self.batchsize, num_classes))
+
+                #
+                if args.profile:
+                    import pathlib
+                    timeline_dir = str(pathlib.Path.cwd()) + '/timeline/'
+                    if not os.path.exists(timeline_dir):
+                        os.makedirs(timeline_dir)
+                    timeline_file = timeline_dir + 'timeline-' + str(torch.backends.quantized.engine) + '-' + \
+                                args.arch + str(i) + '-' + str(os.getpid()) + '.json'
+                    print(timeline_file)
+                    prof.export_chrome_trace(timeline_file)
+                    # table_res = prof.key_averages().table(sort_by="cpu_time_total")
+                    # self.save_profile_result(timeline_dir + torch.backends.quantized.engine + "_result_average.xlsx", table_res)
 
     def test_set_classy_state_plain(self):
         # We use the same model architecture to save and load a model state.
@@ -234,3 +290,47 @@ class TestResNeXt3D(unittest.TestCase):
         model_3d = build_model(model_3d_config)
         with self.assertRaises(AssertionError):
             model_3d.set_classy_state(model_2d_state)
+
+    def save_profile_result(filename, table):
+        import xlsxwriter
+        workbook = xlsxwriter.Workbook(filename)
+        worksheet = workbook.add_worksheet()
+        keys = ["Name", "Self CPU total %", "Self CPU total", "CPU total %" , "CPU total", \
+                "CPU time avg", "Number of Calls"]
+        for j in range(len(keys)):
+            worksheet.write(0, j, keys[j])
+
+        lines = table.split("\n")
+        for i in range(3, len(lines)-4):
+            words = lines[i].split(" ")
+            j = 0
+            for word in words:
+                if not word == "":
+                    worksheet.write(i-2, j, word)
+                    j += 1
+        workbook.close()
+
+
+if __name__ == '__main__':
+    parser = argparse.ArgumentParser(description='PyTorch')
+    parser.add_argument('-a', '--arch', type=str, default='ResNext3D',
+            help='model architecture (default: resnet18)')
+    parser.add_argument('-b', '--batch_size', type=int, default=1,
+            help='batch size')
+    parser.add_argument('--jit', action="store_true",
+            help='jit')
+    parser.add_argument('--profile', action="store_true",
+            help='profile')
+    parser.add_argument('-w', '--warmup_iters', type=int, default=10,
+            help='warmup')
+    parser.add_argument('-i', '--num_iters', type=int, default=100,
+            help='iterations')
+    parser.add_argument('--channels_last', type=int, default=0,
+            help='NHWC')
+    parser.add_argument('--precision', type=str, default='float32',
+            help='float32, bfloat16')
+    args = parser.parse_args()
+
+    case = TestResNeXt3D()
+    case.setUp()
+    case.test_forward_pass()
